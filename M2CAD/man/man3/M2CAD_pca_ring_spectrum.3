.TH "M2CAD.pca_ring_spectrum" 3 "Tue Dec 1 2015" "Version 1.0" "M2CAD" \" -*- nroff -*-
.ad l
.nh
.SH NAME
M2CAD.pca_ring_spectrum \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "def \fBpca_ring_spectrum\fP (images)"
.br
.ti -1c
.RI "def \fBactg\fP (X, Y)"
.br
.ti -1c
.RI "def \fBpca_lines\fP (alphas, sig, dt, ns)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "tuple \fBnoise\fP = np\&.multiply(np\&.random\&.randn(100,s),std\&.T)"
.br
.RI "\fINoise propagation in PCA space\&. \fP"
.ti -1c
.RI "tuple \fBalphanoise\fP = np\&.dot(base\&.T,noise\&.T)"
.br
.ti -1c
.RI "tuple \fBsig\fP = np\&.zeros(2)"
.br
.ti -1c
.RI "int \fBcount\fP = 0"
.br
.ti -1c
.RI "tuple \fBlocky\fP = np\&.zeros(np\&.size(theta))"
.br
.RI "\fISecond correction of attractors\&. \fP"
.ti -1c
.RI "tuple \fBdistance\fP = np\&.abs(theta\-attractors[i])"
.br
.ti -1c
.RI "tuple \fBbigloc\fP = np\&.where(distance >= np\&.pi)"
.br
.ti -1c
.RI "tuple \fBlocator\fP = np\&.zeros(np\&.size(angle))"
.br
.ti -1c
.RI "tuple \fBimages\fP = np\&.zeros([n2**0\&.5,n2**0\&.5])"
.br
.ti -1c
.RI "int \fBclus\fP = angle+0"
.br
.ti -1c
.RI "int \fBn_clus\fP = ns+1"
.br
.ti -1c
.RI "list \fBcolors\fP = [[0\&.6,0,0],np\&.array([135, 233, 144])/255\&.,[0,0,0]]"
.br
.ti -1c
.RI "list \fBcol\fP = [0,0,0\&.7]"
.br
.ti -1c
.RI "list \fBxy\fP = alphas[0:2,np\&.where(locator == k)[0]]"
.br
.RI "\fI
.SH "class_member_mask = (clus== k)"
.PP
\fP"
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
@package M2CAD
.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "def M2CAD\&.pca_ring_spectrum\&.actg ( X,  Y)"

.PP
.nf
Computes the arctan(x/y) of two vectors. 
INPUTS:
    X: 1-d vector
    Y: 1-d vector
OUTPUTS:
    angle: 1-d vector with the result of arctan(X/Y)

EXAMPLE:

.fi
.PP
 
.SS "def M2CAD\&.pca_ring_spectrum\&.pca_lines ( alphas,  sig,  dt,  ns)"

.PP
.nf
Finds alignments in PCA coefficients and identifies corresponding structures in direct space. It is actually a simple angular clustering algorithm.
INPUTS:
    alphas: PCA coefficients.
    sig: noise levels in the two first PCA components
    dt: angular resolution at which the algorithm has to discriminate between coefficients of a same group
    ns: number of alignments to identify.
OUTPUTS:
    images: 2-d map of strucutres with same colours. Each structure has all its pixels set to the same value.
    Pixels identified as non-significant are set to 0.
EXAMPLE:

.fi
.PP
 
.SS "def M2CAD\&.pca_ring_spectrum\&.pca_ring_spectrum ( images)"

.PP
.nf
Decomposes a set of SEDs from multiband images into PCA and filters the less significant coefficients
INPUTS:
    images: cube of muti-bandimages with size n1xn2xs where s is the number of bands and n1xn2, the size of each image
OUTPUTS:
    alphas: PCA coefficients for each SED at each pixel location. 
    basis: corresponding PCA basis.
    sig: noise as propagated into PCA space.


EXAMPLE:

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for M2CAD from the source code\&.
